import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import logo from './logo.svg';
import Layout from './components/Layout';
import './App.css';


import {BrowserRouter as Router, Route, Link, Redirect, withRouter} from 'react-router-dom';

import Home from './pages/Home';
import Upload from './pages/Upload';
import MyUploads from './pages/MyUploads';
import Favorites from './pages/Favorites';
import Login from './pages/Login';

import NavBar from './components/NavBar';
import './index.css';
import Auth from './bin/Auth.js';
//import './bin/AuthData';

/*
class App extends Component {
  render() {
    return (
      <div className="App">
        <Layout>
        </Layout>
      </div>
    );
  }
}
*/

/*
const PrivateRoute = ({ component: Component, ...rest }) => (
  <Route {...rest} render={props => (document.cookie ? (<Component {...props}/>) : (<Redirect to={{pathname: '/login', state: { from: props.location }}}/>))}/>
)
*/

/*
class PrivateRoute extends React.Component{
  render() {
    console.log(document.cookie);
    return (<Redirect to={{pathname: '/login', state: { from: props.location }}}/>);
  }
)*/

class App extends Component{

  constructor(props){
    super(props);

    function AuthData (){
      this.username = "";
      this.password = "";
      this.sessionID = "";
    }
    this.auth = new Auth;
    var tempObj = new AuthData();
    console.log(tempObj);
    tempObj.sessionID = JSON.parse(localStorage.getItem("auth")).sessionID;
    var tempJSON = JSON.stringify(tempObj);
    localStorage.setItem("auth", tempJSON);
    //if (localStorage.)
    //var tempObj = new Auth();
    //var tempJSON = JSON.stringify(tempObj);
    //console.log(tempAuth);
    //console.log(tempAuth.getNameThing());
    //console.log("Setting auth");
    //localStorage.setItem("auth", tempJSON);
    //localStorage.auth = tempAuth;
    //var json_string = localStorage.getItem("auth");
    //var obj = JSON.parse(json_string);
    //console.log(obj.nameThing);
    //console.log(localStorage.auth.getNameThing());

  }
  checkAuthentication = () => {
    //alert("Check Auth");
    if (this.auth.getSessionID() == 1221313){
      return true;
    }
    //window.location.href = "/login";
    else {
      return false;
    }
  }


  render() {
    /*
    const PrivateRoute = ({component: Component, ...rest}) => (
      <Route {...rest} render={props => true ? (<Component {...props}/>) : (<Redirect to={{pathname: '/login', state: {from: props.location }}}/>)}
    );
    */
    const MainRoute = ({ component: Component, ...rest }) => (
      <Route {...rest} render={props => (this.checkAuthentication() ? (<Component {...props}/>) : (<Redirect to={{pathname: '/Home', state: { from: props.location }}}/>) )}/>
    )
    const PrivateRoute = ({ component: Component, ...rest }) => (
      <Route {...rest} render={props => (this.checkAuthentication() ? (<Component {...props}/>) : (<Redirect to={{pathname: '/login', state: { from: props.location }}}/>) )}/>
    )
    return (
      <Router>
        <div className="App">
          <div className="NavBar">
           <NavBar>
           </NavBar>
          </div>
          {/*Poop*/}
          <MainRoute exact path ="/" component={Home}/>
          <Route exact path ="/login" component={Login}/>
          <PrivateRoute exact path ="/home" component={Home}/>
          <PrivateRoute exact path="/upload" component={Upload}/>
          <PrivateRoute exact path="/myuploads" component={MyUploads}/>
          <PrivateRoute exact path="/favorites" component={Favorites}/>
          {/*<Auth></Auth>*/}
        </div>
      </Router>
    );
  }
}
export default App;
