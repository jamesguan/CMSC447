import React, {Component} from 'react';

// This is the table that displays all the malware
class Tables extends Component{

  constructor(props){
    super(props);

    this.rows = 0; // Number of current rows
    this.columns = 5; // Number of current columns for all the fields of the malware

    this.state = {
      Table: []
    }

    this.connection = {}; // The placeholder for the connection
    this.serverIp = "localhost";

    // General websocket code
    window.WebSocket = window.WebSocket || window.MozWebSocket;
    if (!window.WebSocket) {
      console.log("No WebSocket available");
      alert('no websocket available');
      return;
    }
    this.connection = new WebSocket('ws://'+this.serverIp+':13379');
    this.connection.onopen = function () {};
    var tempTable = [];
    this.connection.onmessage = function(message) {
    try {
        var command = JSON.parse(message.data || message.utf8Data);
        if (command.length > 0){
          if ('filename' in command[0])
          {
            tempTable = command; // Set the JSON of Malware to the table
          }
        }
      } catch ( e) {
        alert('error: ' + e);
        console.log( e);
        return;
      }
    };

    // Constantly poll for updating the table with new data
    setInterval(() => {
      this.setState({Table: tempTable});
    }, 1000);

    // Constantly request for data to update table properly
    setInterval(() => {
      this.sendTableRequest();
    }, 10);

  }

  // Sends a command to the back end javascript controller to send an array of malware
  sendTableRequest = () => {
    this.connection.send(JSON.stringify({command: "send_array"}));
  }

  // This adds generates the rows dynamically from the table data into the virtual DOM
  addRows = (index) =>{
    this.rows++;
    return (
      <tr key={this.rows}>
        <td key={this.state.Table[index].filename}> {this.state.Table[index].filename} </td>
        <td key={this.state.Table[index].lastModifiedDate}> {this.state.Table[index].lastModifiedDate} </td>
        <td key={this.state.Table[index].size}> {this.state.Table[index].size} </td>
        <td key={this.state.Table[index].hash}> {this.state.Table[index].hash} </td>
        <td key={this.state.Table[index].comment}> {this.state.Table[index].comment} </td>
      </tr>
    );
  }

  // This generates the table dynamically with JSX and generates the rows accordingly
  generateTable = () =>{
    let tableLength = this.state.Table.length;
    let renderJSX = [];
    for(let i = 0; i < tableLength; i++){
      renderJSX.push(this.addRows(i));
    }
    return  (renderJSX);
  }

  render(){
    // css for the dynamically generated components of the DOM
    const styles = {
      Table: {
        width: "100vw"
      },
      Row: {
        width: "100vw",
        border: "1px solid #dddddd"
      },
      Column: {
        height: "3vw"
      }
    }

    // Return the JSX to generate for the virtual DOM
    return (
      <div>
      <table style={styles.Table}>
        <tbody>
          <tr key={this.rows} style={styles.Row}>
            <th key={"malwareName"} style={styles.Column}>Malware Name</th>
            <th key={"dateModified"} style={styles.Column}>Date Modified</th>
            <th key={"fileSize"} style={styles.Column}>File Size</th>
            <th key={"hash"} style={styles.Column}>Hash</th>
            <th key={"comments"} style={styles.Column}>Comments</th>
          </tr>
          {this.generateTable()}
        </tbody>
      </table>
      </div>
    );
  }
}

export default Tables;

/*
<button onClick={this.forceUpdate}>Update</button>
 */
