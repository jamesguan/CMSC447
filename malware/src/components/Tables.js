import React, {Component} from 'react';
//import PropTypes from 'prop-types';
class Tables extends React.Component{
  constructor(props){
    super(props);

    this.rows = 0;
    this.columns = 5;
    this.Table = [];
    this.Table = [{name: "sum_ting_wong.bat", dateModified: "04-12-2017", fileSize: "9001KB", hash: "0x6a09e667f3bcc908", comment: "Found this on my website"},{name: "fuck_shit.bat", dateModified: "05-12-2017", fileSize: "9002KB", hash: "0x6a09e667f3bcc901", comment: "Fucking hell"},{name: "ibrahim.bat", dateModified: "05-12-2017", fileSize: "9002KB", hash: "0x6a09e667f3bcc901", comment: "Fucking hell"}]
    //this.setUpWebSocket();

    this.connection;
    this.serverIp = "localhost";
  }

  setUpWebSocket = () => {
    //alert('A username and password was submitted: ' + this.state.username + ' ' + this.state.password);
    window.WebSocket = window.WebSocket || window.MozWebSocket;
    if (!window.WebSocket) {
      console.log("No WebSocket available");
      alert('no websocket available');
      return;
    }
    this.connection = new WebSocket('ws://'+this.serverIp+':13379');
    this.connection.onopen = function () {};
    this.connection.onmessage = function(message) {
      try {
        var command = JSON.parse(message.data || message.utf8Data);
        console.log(command);
        if (command.hasOwnProperty('username'))
        {
          if(command.id == 1221313 && command.valid == true){
            console.log("valid login");
          }
        }

      } catch ( e) {
        alert('error: ' + e);
        console.log( e);
        return;
      }
    };
    //alert('damn');

  }

  pullFromDB = () => {

  }

  insertIntoArray = () => {

  }

  addRows = (index) =>{
    this.rows++;
    return (
      <tr key={this.rows}>
        <td key={this.Table[index].name}> {this.Table[index].name} </td>
        <td key={this.Table[index].dateModified}> {this.Table[index].dateModified} </td>
        <td key={this.Table[index].fileSize}> {this.Table[index].fileSize} </td>
        <td key={this.Table[index].hash}> {this.Table[index].hash} </td>
        <td key={this.Table[index].comment}> {this.Table[index].comment} </td>
      </tr>
    );
  }

  generateTable = () =>{
    let tableLength = this.Table.length;

    let renderJSX = [];
    for(let i = 0; i < tableLength; i++){
      renderJSX.push(this.addRows(i));
    }
    return  (renderJSX);
  }

  render(){
    const styles = {
      Table: {
        width: "100vw"
      },
      Row: {
        width: "100vw",
        border: "1px solid #dddddd"
      },
      Column: {
        height: "3vw"
      }
    }
    return (
      <table style={styles.Table}>
        <tbody>
          <tr key={this.rows} style={styles.Row}>
            <th key={"malwareName"} style={styles.Column}>Malware Name</th>
            <th key={"dateModified"} style={styles.Column}>Date Modified</th>
            <th key={"fileSize"} style={styles.Column}>File Size</th>
            <th key={"hash"} style={styles.Column}>Hash</th>
            <th key={"comments"} style={styles.Column}>Comments</th>
          </tr>
          {this.generateTable()}
        </tbody>
      </table>
    );
  }
}

export default Tables;
