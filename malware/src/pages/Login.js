import React, {Component} from 'react';
import Layout from '../components/Layout.js';
import GoogleLogin from 'react-google-login';
import Auth from '../bin/Auth'//Contains authentication utilites

class Login extends Component {
  constructor(props){
    super(props);
    this.auth = new Auth();
    this.connection = {};
    this.serverIp = "localhost";
    this.state = {
      value: "",
      username: "",
      password: ""
    }

    var json_string = localStorage.getItem("auth");
    var tempObj = JSON.parse(json_string);

    // If the sessionID is blank, redirect to the home page where the redirct will handle redirecting to the login
    if (!(tempObj.sessionID === "")){
      window.location.href = ('/');
    }
    this.setUpWebSocket();
  }

  // This handles the submission by calling a method to send the user data
  handleSubmit = () => {
    this.sendLoginInfo();
  }

  // This function sets up the websocket to communicate between the front end and the back end.
  setUpWebSocket = () => {
    window.WebSocket = window.WebSocket || window.MozWebSocket;

    // Check for the websocket
    if (!window.WebSocket) {
      console.log("No WebSocket available");
      alert('no websocket available');
      return;
    }

    // Sets up a connection to the IP and port
    this.connection = new WebSocket('ws://'+this.serverIp+':13379');
    this.connection.onopen = function () {};
    this.connection.onmessage = function(message) {
      // When message received, try to parse and read the data
      try {
        var command = JSON.parse(message.data || message.utf8Data);
        console.log(command);
        if (command.hasOwnProperty('id'))
        {
          if(command.id === 1221313 && command.valid === true){
            //document.cookie = "username=" + command.id;

            // Read the authentication item and store the string
            var json_string = localStorage.getItem("auth");
            var tempObj = JSON.parse(json_string);
            tempObj.sessionID = command.id;
            var tempJSON = JSON.stringify(tempObj);
            localStorage.setItem("auth", tempJSON);

          }
        }

        // Redirect to the home where the redirect will automatically check session and redirect to proper page
        window.location.href = ('/');

      } catch ( e) {
        // Log error if socket does not work
        alert('error: ' + e);
        console.log( e);
        return;
      }
    };
  }

  // This sends the login info to the server by sending it as a JSON string.
  sendLoginInfo = () => {
    var login = {username: this.state.username, password: this.state.value};
    this.connection.send(JSON.stringify(login));

    //alert(JSON.stringify(login));
    //event.preventDefault();
  }

  // Fills the username textbox as the user is typing
  handleUserChange = (event) => {
    //this.setState({value: event.target.value.toUpperCase()});
    this.setState({username: event.target.value});
  }

  // Fills the password textbox as it goes
  handlePassChange = (event) => {
    this.setState({password: event.target.value});

    //this.state.value = event.target.value;
    this.setState({value: event.target.value});
    var passLength = this.state.password.length;
    var temp = "";
    for (let i = 0; i < passLength; i++){
      temp += "$";
    }
    this.setState({password: temp});
  }

  // Handles general on key presses to check for the enter key for login
  handleUserOnKeyPress = (e) => {
    if (e.key === 'Enter') {
      this.handleSubmit();
    } else if (e.key === 'Return'){
      this.handleSubmit();
    }
  }

  // Function to replace the keys with dollar signs to hide the password from view
  handlePassOnKeyPress = (e) => {
    // If pressing enter or return, just handle the submit
    if (e.key === 'Enter') {
      this.handleSubmit();
    } else if (e.key === 'Return'){
      this.handleSubmit();
    } else if (e.key === 'Backspace' || e.key === 'Delete'){
      if (this.state.value.length > 0){
        this.setState({value: (this.state.value.substring(0, this.state.value.length - 1))});
      } else {

      }
    } else {
      this.setState({value: (this.state.value + e.key)});
    }

    // Set the correct length of the passphrase in the password box to the actual value
    this.setState({password: this.state.value});
    let passLength = this.state.value.length;
    var temp = "";
    for (let i = 0; i < passLength; i++){
      temp += "$";
    }
    this.setState({password: temp});

  }

  // Render will render the Login part of the DOM
  render() {

    // Google failure response
    const responseGoogleFailure = (response) => {
      console.log("Failure");
      alert("Failed Authentication");
      console.log(response);
    }

    // Google authentication success response
    const responseGoogleSuccess = (response) => {
      console.log("Success");
      //window.location.href = "/home";
      console.log(response);
    }

    // css data to display the Login all nicely
    const styles = {
      submition: {
        position: "relative",
        minHeight: "14px",
        minWidth: "30px",
        width: "15vw",
        margin: "1vw 2vw .5vw 2vw",
        padding: "0 calc(2vw - 10px) 0 calc(2vw - 10px)",
        backgroundColor: "white",
        border: "none",
        fontSize: "calc(2vw - 2px)"
      }
    }


    return (
      <div className="Login">
        <Layout>
            {/*This is the only way to comment within JSX, this is google authentication below but is currently
              unsupported by our backend*/}
            <GoogleLogin
              clientId="212428156672-3ve8lt2j56dg894ghtukgvg8696recc0.apps.googleusercontent.com"
              buttonText="Google Login"
              onSuccess={responseGoogleSuccess}
              onFailure={responseGoogleFailure}
            />
            <label>
              Username:
              <input type="text" value={this.state.username} onChange={this.handleUserChange} onKeyPress={this.handleUserOnKeyPress}/>
            </label>
            <label>
              Password:
              <input type="text" value={this.state.password} onKeyDown={this.handlePassOnKeyPress}/>
            </label>
            <input type="submit" style={styles.submition} value="Submit" onClick={this.handleSubmit}/>
            {/*  <input type="checkbox" checked="checked"/>*/}
        </Layout>
      </div>
    );
  }
}

// Export Login to allow import
export default Login;
