import React, {Component} from 'react';
import Layout from '../components/Layout';
import CryptoJS from 'crypto-js';

export default class Upload extends Component{

  constructor(props){
    super(props);

    this.fileThing = {};

    this.connection = {};
    this.serverIp = "localhost";
    this.setUpWebSocket();
  }
  setUpWebSocket = () => {
    //alert('A username and password was submitted: ' + this.state.username + ' ' + this.state.password);
    window.WebSocket = window.WebSocket || window.MozWebSocket;
    if (!window.WebSocket) {
      console.log("No WebSocket available");
      alert('no websocket available');
      return;
    }
    this.connection = new WebSocket('ws://'+this.serverIp+':13379');
    this.connection.onopen = function () {};
    this.connection.onmessage = function(message) {
      try {
        var command = JSON.parse(message.data || message.utf8Data);
        //console.log(command);
        if (command.hasOwnProperty('filename'))
        {
          for (var i = 0; i < command.length; i++) {
            console.log("Filename: " + command.filename);
          }
        }

      } catch ( e) {
        alert('error: ' + e);
        console.log( e);
        return;
      }
    };
    //alert('damn');

  }

  convertDataURIToBinary = (dataURI) =>{
    //readAsDataURL(file);
/*
    var BASE64_MARKER = ';base64,';

//function convertDataURIToBinary(dataURI) {
    var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
    var base64 = dataURI.substring(base64Index);
    var raw = window.atob(base64);
    var rawLength = raw.length;
    var array = new Uint8Array(new ArrayBuffer(rawLength));

    for(i = 0; i < rawLength; i++) {
      array[i] = raw.charCodeAt(i);
    }
    return array;
*/
  }

  convertDataURIToBinaryString = (dataURI) =>{
    //readAsDataURL(file);
    /*
    var BASE64_MARKER = ';base64,';

//function convertDataURIToBinary(dataURI) {
    var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
    var base64 = dataURI.substring(base64Index);
    var raw = window.atob(base64);
    var rawLength = raw.length;
    var array = new Uint8Array(new ArrayBuffer(rawLength));

    for(i = 0; i < rawLength; i++) {
       =  raw.charCodeAt(i);
    }
    return array;
    */
  }

  checkUploadFile = (event) =>{
    var fr;
    console.log(event);
    console.log(event.target);
    //console.log(event.target.result);
    var thing = event.target;
    if('files' in thing){
      if (thing.files.length === 0) {
        console.log("Select one or more files.");
      } else {
        for (var i = 0; i < thing.files.length; i++) {

          var file = thing.files[i];
          /*
          alert("File name: " + file.fileName);
          alert("File size: " + file.fileSize);
          alert("Binary content: " + file.getAsBinary());
          alert("Text content: " + file.getAsText(""));
          */

          this.fileThing = {file: 0, filename: "", size: "", lastModifiedDate: "", hash: "", type: "", comment: ""};
          console.log(file);
          if ('name' in file) {
            this.fileThing.file = file;
            console.log("name: " + file.name);
            this.fileThing.filename = file.name;
          }
          if ('size' in file) {
            console.log("size: " + file.size + " bytes");;
            this.fileThing.size = file.size;
          }
          if ('name' in file) {
            /*
            var reader = new FileReader(file);
            console.log(reader);
            reader = function(event) {
              var binary = event.target;
              var md5 = CryptoJS.MD5(binary).toString()
              console.log("hash" + md5);
              this.fileThing.hash = md5;
            };
            */
            /*
            var reader = new FileReader();

              reader.onloadend = function () {
                   text = (reader.result);
              }

              reader.readAsBinaryString(document.getElementById("firmware_firmware").files[0]);

              var hash = CryptoJS.MD5(text);

              hash.toString();
              */
            /*
            fr = new FileReader();
            //fr.onload = receivedText;
            //fr.readAsText(file);
            fr.readAsDataURL(file);
            //console.log(binary);

            //readAsDataURL(file);
            console.log("result" + fr.result);
            var md5 = CryptoJS.MD5(fr.result).toString();
            alert(md5);
            alert(md5.toString());
            this.fileThing.hash = md5;
            */

            event.preventDefault();
            //var file = event.dataTransfer.files[0];
            var reader = new FileReader();

            reader.onload = function(event) {
              var binary = event.target.result;
              var md5 = CryptoJS.MD5(binary).toString()
              console.log(md5);
              //alert(md5);
              this.fileThing.hash = md5;
            };

            reader.readAsBinaryString(file);


            console.log(reader.result);
            //alert("RESULT:" + reader.result);

            //console.log('hash ' + this.fileThing.hash);
            /*
            function receivedText() {
                //showResult(fr, "Text");

                fr = new FileReader();
                //fr.onload = receivedBinary;

            }*/

          }



          if ('lastModifiedDate' in file) {
            console.log("lastModifiedDate: " + file.lastModifiedDate);
            this.fileThing.lastModifiedDate = file.lastModifiedDate;
          }
          if ('type' in file) {
            console.log("type: " + file.type);
            this.fileThing.type = file.type;
          }
          this.fileThing.comment = "Random comment";
          console.log(this.fileThing);
        }
      }

    }

  }

  sendData = () => {
    if (this.fileThing != null){
      this.connection.send(JSON.stringify(this.fileThing));
      //this.connection.send(JSON.stringify(login));
      //this.connection.send(JSON.stringify(login));
    }
    this.connection.send(JSON.stringify({command: "read_array"}));
    //alert(JSON.stringify(this.fileThing));
    //event.preventDefault();
    window.location.href = ('/home');
  }

  handleUploading = (progress, mill) =>{
    console.log("handleUploading");
  }

  handleUploadSuccess = () =>{
    console.log("handleUploadSuccess");
  }

  handleUploadFailed = (err) =>{
    console.log("handleUploadFailed");
  }

  getLimitedNumber = () =>{
    return this.limit;
  }

  render(){
    return(
      <div className="Upload">
      <Layout>
        <input type="file" id="myFile" multipleSize="1" onChange={this.checkUploadFile}/>
        <button ref="uploadBtn" onClick={this.sendData}>upload</button>
      </Layout>
    </div>
    );
  }
}
/*
<FileUpload options={this.uploadOptions} ref="fileUpload">
  <input type="text" name="filename"></input>


</FileUpload>
 */

/*
<form>
  FileName:
  <input type="text" name="filename"></input>
</form>
<button onClick={this.openFile}>GrabFile</button>
<button>Upload</button>
*/

/*
_c: 'file',
_a: 'UploadFile'
},
multiple: true,
numberLimit: this.getLimitNumber,
accept: '/*',
fileFieldName(file) {
  return file.rawID
},
chooseAndUpload: true,
wrapperDisplay: 'block',
beforeUpload: this.checkUploadFile,
uploading: this.handleUploading,
//xhr success
uploadSuccess: this.handleUploadSuccess,
//xhr fail
uploadFail: this.handleUploadFailed,
uploadError: this.handleUploadFailed
}
 */
