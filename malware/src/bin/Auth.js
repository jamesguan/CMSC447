import React from 'react';
//import {BrowserRouter as Router, Route, Link, Redirect, withRouter} from 'react-router-dom';

export default class Auth extends React.Component{
  constructor(props){
    super(props)
    this.isAuthenticated = false;
    console.log("Auth constructor");
    this.nameThing = "Authenticator";

    var json_string = localStorage.getItem("auth");
    var tempObj = JSON.parse(json_string);
    console.log(tempObj);
    this.username = tempObj.username;
    this.password = tempObj.password;
    this.sessionID = tempObj.sessionID;

  }

  getSessionID = () =>{
    var json_string = localStorage.getItem("auth");
    var tempObj = JSON.parse(json_string);
    console.log(tempObj);
    this.username = tempObj.username;
    this.password = tempObj.password;
    this.sessionID = tempObj.sessionID;
    return this.sessionID;
  }

  setSessionID = (sessionID) => {
    //alert("setSessionID");
    var json_string = localStorage.getItem("auth");
    var tempObj = JSON.parse(json_string);
    tempObj.sessionID = sessionID;
    var tempJSON = JSON.stringify(tempObj);
    localStorage.setItem("auth", tempJSON);
  }
  render(){
    return (<div></div>);
  }
  /*
  getNameThing = () => {
    console.log("Getting name thing: ");
    return this.nameThing;
  }

  authenticate = (cb) => {
    this.isAuthenticated = true
    setTimeout(cb, 100) // fake async
  }

  signout = (cb) => {
    this.isAuthenticated = false
    setTimeout(cb, 100)
  }

  login = () => {
    this.authenticate();
  }
  logout = () => {
    this.signout();
  }

  getButton = () => {
    var button = null;
     if (this.isAuthenticated) {
       button = <button onClick={this.logout}>Logout</button>;
     } else {
       button = <button onClick={this.login}>Login</button>;
     }
     return button;
  }

  getAuthenticated = () => {
    return this.isAuthenticated;
  }

  render () {
    return (this.getButton());
  }
  /*
  const AuthButton = withRouter(({ history }) => (
    fakeAuth.isAuthenticated ? (
      <p>
        Welcome! <button onClick={() => {
          fakeAuth.signout(() => history.push('/'))
        }}>Sign out</button>
      </p>
    ) : (
      <p>You are not logged in.</p>
    )
  ))
  */
  /*
  getButton = () => {
    let button = null;
     if (this.isAuthenticated) {
       button = <button onClick={this.logout}>Logout</button>;
     } else {
       button = <button onClick={this.login}>Login</button>;
     }
     return button;
  }
  */


  /*
  loggedIn () {
    return false;
  }

  requireAuth = (nextState, replace) => {

    if (!this.loggedIn()) {
      replace({
        pathname: '/login'
      })
    }
  } */
}
